#!/usr/bin/env node

/**
 * Module dependencies.
 */
console.log('Starting PFS sessiontracker service');
var app = require('../app');
var debug = require('debug')('app:server');
var models = require("../models");
var fs = require('fs');
var path      = require('path');
var env       = process.env.NODE_ENV || 'development';
var config    = require(path.join(__dirname, '..', 'config', 'server.json'))[env];
var http = require('http');
var https = require('https');
var winston = require('winston');

var logdate = new Date();
var year = logdate.getFullYear();
var month = logdate.getMonth();
var date = logdate.getDate();
var hours = logdate.getHours();
var minutes = logdate.getMinutes();
var seconds = logdate.getSeconds();

winston.add(winston.transports.File, { filename: 'logs/' + year + '-' + month + '-' + date + '_' + hours + '-' + minutes + '-' + seconds + '.log' });

if(!config.consoleLogging) {
	winston.remove(winston.transports.Console);
}

winston.handleExceptions();

/**
 * Setup HTTP server to redirect to HTTPS
 */
var httpServer = http.createServer(function (req, res) {
    res.writeHead(301, { "Location": "https://localhost:" + config.portHttps + req.url });
    res.end();
}).listen(config.portHttp, config.ipaddress, function() {
	winston.log('info', 'Express HTTP server listening on port ' + httpServer.address().port + ' on ' + httpServer.address().address);
});

/**
 * Setup the main HTTPS server
 */
models.sequelize.sync({force: false}).then(function () {

	var httpsServer = https.createServer({
	      key: fs.readFileSync('../../certs/key.pem'),
	      cert: fs.readFileSync('../../certs/cert.pem'),
	      ca: fs.readFileSync('../../certs/cabundle.crt')
	    }, app)
	    .listen(config.portHttps, config.ipaddress, function() {
           winston.log('info', 'Express HTTPS server listening on port ' + httpsServer.address().port + ' on ' + httpsServer.address().address);
           httpsServer.on('error', onError);
           httpsServer.on('listening', onListening);
        });

		// Only set the Strict-Transport-Security header if we are not a locally signed certificate		
		if(env !== 'development') {
			var helmet = require('helmet');
	
			var ONE_YEAR = 31536000000;
			app.use(helmet.hsts({
			    maxAge: ONE_YEAR,
			    includeSubdomains: true,
			    force: true
			}));
		}
		
		app.use('/', require('../routes/index'));
		app.use('/auth', require('../routes/auth'));
		app.use('/scenarios', require('../routes/scenarios'));
		app.use('/authors', require('../routes/authors'));
		app.use('/people', require('../routes/people'));
		app.use('/characters', require('../routes/characters'));
		app.use('/statistics', require('../routes/statistics'));
		app.use('/user', require('../routes/user'));
		app.use('/report', require('../routes/report'));
		app.use('/groups', require('../routes/groups'));
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
